<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans.xsd 
    http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop.xsd 
    http://www.springframework.org/schema/tx  
    http://www.springframework.org/schema/tx/spring-tx.xsd 
    http://www.springframework.org/schema/context  
    http://www.springframework.org/schema/context/spring-context.xsd">

	<context:property-placeholder location="classpath:properties/app.properties" />
	<!--创建数据源 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		destroy-method="close" lazy-init="false">
		<property name="driverClassName" value="${db.driver}" />
		<property name="url" value="${db.url}" />
		<property name="username" value="${db.username}" />
		<property name="password" value="${db.password}" />
		<property name="initialSize" value="1" /><!-- 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时 -->
		<property name="maxActive" value="50" /><!-- 最大连接池数量 -->
		<!-- <property name="maxIdle" value="0" />已经不再使用，配置了也没效果 -->
		<property name="maxWait" value="30000" /><!-- 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，
													缺省启用公平锁，并发效率会有所下降，
													如果需要可以通过配置useUnfairLock属性为true使用非公平锁。 -->
		<property name="filters" value="stat,wall,log4j,config" /><!-- 属性类型是字符串，通过别名的方式配置扩展插件，
														常用的插件有：
														监控统计用的filter:stat 
														日志用的filter:log4j
														 防御sql注入的filter:wall -->
		<property name="connectionProperties" value="config.decrypt=true;config.decrypt.key=${db.publicKey}" />
		<property name="timeBetweenEvictionRunsMillis" value="3000" /><!-- 有两个含义：
																	1) Destroy线程会检测连接的间隔时间
																	 2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明 -->
		<property name="minEvictableIdleTimeMillis" value="300000" /><!--  -->
		<property name="validationQuery" value="SELECT 1  FROM DUAL" /><!-- 用来检测连接是否有效的sql，要求是一个查询语句。
																		如果validationQuery为null，testOnBorrow、testOnReturn、
																		testWhileIdle都不会其作用。 -->
		<property name="testWhileIdle" value="true" /><!-- 建议配置为true，不影响性能，并且保证安全性。
															申请连接的时候检测，如果空闲时间大于
															timeBetweenEvictionRunsMillis，
															执行validationQuery检测连接是否有效 -->
		<property name="testOnBorrow" value="false" /><!-- 申请连接时执行validationQuery检测连接是否有效，
														做了这个配置会降低性能。 -->
		<property name="testOnReturn" value="false" /><!-- 归还连接时执行validationQuery检测连接是否有效，
															做了这个配置会降低性能 -->
		<property name="poolPreparedStatements" value="true" /><!-- 是否缓存preparedStatement，也就是PSCache。
																PSCache对支持游标的数据库性能提升巨大，比如说oracle。
																在mysql5.5以下的版本中没有PSCache功能，建议关闭掉。
																5.5及以上版本有PSCache，建议开启。 -->
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" /><!--  -->
	</bean>
	<!--jdbcTemplate-->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>
	<!-- 配置SqlSessionFactoryBean -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis/config.xml" />
		<!-- mapper扫描 -->
		<property name="mapperLocations">
			<list>
				<value>classpath:com/*/*/*/model/*.xml</value>
			</list>
		</property>
	</bean>
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactory" />
	</bean>
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 扫描器开始扫描的基础包名，支持嵌套扫描； -->
		<property name="basePackage" value="com.*.*.*.mapper" />
		<!-- 基于接口的过滤器，实现了该接口的dao才会被扫描器扫描，与basePackage是与的作用 -->
		<property name="markerInterface" value="com.platform.common.base.mapper.BaseMapper" />
	</bean>
	
	<bean id="druid-stat-interceptor"
		class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
	</bean>
	<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut"
		scope="prototype">
		<property name="patterns">
			<list>
				<value>com.*.*.*.service</value>
				<value>com.*.*.*.dao</value>
			</list>
		</property>
	</bean>
	<aop:config proxy-target-class="true">
		<aop:advisor advice-ref="druid-stat-interceptor"
			pointcut-ref="druid-stat-pointcut" />
	</aop:config>
	
	<!-- 事务控制 -->
	<!-- 日志记录 -->
	<bean id="logAspect" class="com.platform.core.log.LogAspect"/>  
	<!-- 告诉Spring你用的是哪种事务管理器 -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 配置事务隔离级别 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="save*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="del*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="*" propagation="SUPPORTS" read-only="true"/>  
		</tx:attributes>
	</tx:advice>
	<aop:config proxy-target-class="true">
		<aop:pointcut expression="execution(* com.*.*.*.service..*.*(..))" id="serviceMethod"/>
		<!-- 通知者：把通知和切入点结合起来 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethod"/>
		<!-- 
		<aop:aspect ref="logAspect">
			<aop:pointcut expression="execution(* com.hotent.platform.controller..*.*(..))" id="logPointcut"/>
			<aop:around pointcut-ref="logPointcut" method="doAudit"/>
		</aop:aspect>
		 -->  
	</aop:config>
</beans>