<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
    xmlns:mvc="http://www.springframework.org/schema/mvc"  
    xmlns:context="http://www.springframework.org/schema/context"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans  
                        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd  
                        http://www.springframework.org/schema/mvc  
                        http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd  
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context-3.2.xsd"> 
    
   <!-- 加载配置属性文件 -->
	<context:property-placeholder ignore-unresolvable="true" location="classpath:properties/app.properties" />
	
    <!-- 继承自AuthorizingRealm的自定义Realm,即指定Shiro验证用户登录的类为自定义的ShiroDbRealm.java -->  
    <bean id="myRealm" class="com.platform.core.shiro.MyRealm">
    	<property name="cacheManager" ref="shiroEhcacheManager"/>
    </bean>  
   
    <!-- Shiro默认会使用Servlet容器的Session,可通过sessionMode属性来指定使用Shiro原生Session -->  
    <!-- 即<property name="sessionMode" value="native"/>,详细说明见官方文档 -->  
    <!-- 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 -->  
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">  
        <property name="realm" ref="myRealm"/>  
        <!-- shiro缓存管理 -->
        <property name="cacheManager" ref="shiroEhcacheManager"/>
        <!-- 会话管理  -->
        <property name="sessionManager" ref="sessionManager"/>
    </bean>  
    <!-- cacheManager配置 -->
    <bean id="shiroEhcacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
	 	 <property name="cacheManagerConfigFile">
		 		<value>classpath:ehcache-shiro.xml</value>
		 </property>
	 </bean>
	<!-- 回话管理配置 -->
	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager"> 
		<property name="sessionDAO" ref="sessionDAO"/>
		<!-- 会话超时时间，单位：毫秒  -->
		<property name="globalSessionTimeout" value="1800000"/>
		<!-- 相隔多久检查一次清理失效会话, 清理用户直接关闭浏览器造成的孤立会话   -->
		<property name="sessionValidationInterval" value="1800000"/>
 		<property name="sessionValidationSchedulerEnabled" value="true"/>
 		<!--  -->
		<property name="sessionIdCookie" ref="sessionIdCookie"/>
		
		<property name="sessionIdCookieEnabled" value="true"/>
	</bean>
	<!-- sessionDAO配置，如果没有会话Dao，session是瞬时的，没法从sessionManager里面拿到session -->
	<bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.MemorySessionDAO">  
    	<!-- <property name="sessionIdGenerator" ref="sessionIdGenerator"/> -->  
	</bean> 
	<!-- 指定本系统SESSIONID, 默认为: JSESSIONID 问题: 与SERVLET容器名冲突, 如JETTY, TOMCAT 等默认JSESSIONID,
		当跳出SHIRO SERVLET时如ERROR-PAGE容器会为JSESSIONID重新分配值导致登录会话丢失! -->
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
	    <constructor-arg name="name" value="msId" /> 
	    <property name="path" value="/" />
	</bean>
    <!-- Shiro权限过滤过滤器定义 -->
	<bean name="shiroFilterChainDefinitions" class="java.lang.String">
		<constructor-arg>
		<!-- kickout为并发登录人数控制的权限验证 -->
			<value>
				/index.do= kickout,authc
				/logout.do = logout
				/register.do= anon
			 	/login.do=anon 
				/*=anon
				/image/*=anon
				/js/*=anon
				/resource/layer-v2.2/**=anon
                /getVerifyCodeImage.do=anon  
                /common/login/**=anon
                /**= kickout,authc
			</value>
		</constructor-arg>
	</bean>
	
    <!-- Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->  
    <!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 -->  
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">  
        <!-- Shiro的核心安全接口,这个属性是必须的 -->  
        <property name="securityManager" ref="securityManager"/>  
        <!-- 要求登录时的链接(可根据项目的URL进行替换,项目的欢迎页),非必须的属性,默认会自动寻找Web工程根目录下的"/login.jsp"页面 -->  
        <property name="loginUrl" value="/index.html"/>  
        <!-- 登录成功后要跳转的连接(本例中此属性用不到,因为登录成功后的处理逻辑在LoginController里硬编码为main.jsp了)  
        <property name="successUrl" value="/index.do"/>  --> 
        <!-- 用户访问未对其授权的资源时,所显示的连接 -->  
        <!-- 若想更明显的测试此属性可以修改它的值,如unauthor.jsp,然后用[玄玉]登录后访问/admin/listUser.jsp就看见浏览器会显示unauthor.jsp -->  
        <property name="unauthorizedUrl" value="/error/nopermissions.jsp"/>  
        <!-- Shiro连接约束配置,即过滤链的定义 -->  
        <!-- 此处可配合我的这篇文章来理解各个过滤连的作用http://blog.csdn.net/jadyer/article/details/12172839 -->  
        <!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 -->  
        <!-- anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种 -->  
        <!-- authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter -->  
        <!-- 过滤链定义，用于并发登录人数控制 -->    
         <property name="filters">    
	         <map>    
	         	<!-- key为权限名称 -->
	            <entry key="kickout" value-ref="kickoutSessionControlFilter"/>    
	         </map> 
         </property>   
        <property name="filterChainDefinitions">  
        	<ref bean="shiroFilterChainDefinitions"/>
        </property>  
        
    </bean>  
    <!-- session 校验单个用户是否多次登录 -->
    <bean id="kickoutSessionControlFilter"  class="com.platform.core.shiro.KickoutSessionControlFilter">    
        <property name="cacheManager" ref="shiroEhcacheManager"/>
        <property name="sessionManager" ref="sessionManager"/> 
        <!-- 踢出之前/之后登录的用户 默认踢出之前登录的用户  -->
	    <property name="kickoutAfter" value="false"/>    
	    <!-- 同一个帐号最大会话数 默认1 -->
	    <property name="maxSession" value="1"/>   
	    <!-- 踢出后到的地址,根据项目而定 -->  
	    <property name="kickoutUrl" value="/login.html?kickout=1"/>   
	</bean>
   
    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->  
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>  
   
    <!-- 开启Shiro的注解(如@RequiresRoles,@RequiresPermissions),需借助SpringAOP扫描使用Shiro注解的类,并在必要时进行安全逻辑验证 -->  
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">  
        <property name="securityManager" ref="securityManager"/>  
    </bean> 
</beans>